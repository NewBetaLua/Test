local NovaUI = {}

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local Player = Players.LocalPlayer

local Themes = {
    FluentDark = {
        Background = Color3.fromRGB(32, 32, 32),
        Secondary = Color3.fromRGB(45, 45, 45),
        Accent = Color3.fromRGB(0, 120, 215),
        Text = Color3.fromRGB(230, 230, 230),
        SubText = Color3.fromRGB(160, 160, 160),
        Border = Color3.fromRGB(60, 60, 60),
        Shadow = Color3.fromRGB(0, 0, 0)
    },
    FluentLight = {
        Background = Color3.fromRGB(243, 243, 243),
        Secondary = Color3.fromRGB(230, 230, 230),
        Accent = Color3.fromRGB(0, 103, 192),
        Text = Color3.fromRGB(32, 32, 32),
        SubText = Color3.fromRGB(96, 96, 96),
        Border = Color3.fromRGB(200, 200, 200),
        Shadow = Color3.fromRGB(150, 150, 150)
    }
}

local CurrentTheme = Themes.FluentDark

local function Create(class, parent, properties)
    local instance = Instance.new(class)
    for prop, value in pairs(properties or {}) do
        instance[prop] = value
    end
    instance.Parent = parent
    return instance
end

local function Tween(target, property, value, duration)
    local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local tween = TweenService:Create(target, tweenInfo, {[property] = value})
    tween:Play()
    return tween
end

local function AddShadow(frame)
    local Shadow = Create("Frame", frame, {
        Size = UDim2.new(1, 10, 1, 10),
        Position = UDim2.new(0, -5, 0, -5),
        BackgroundColor3 = CurrentTheme.Shadow,
        BackgroundTransparency = 0.7,
        BorderSizePixel = 0,
        ZIndex = frame.ZIndex - 1
    })
    Create("UICorner", Shadow, {CornerRadius = UDim.new(0, 8)})
    return Shadow
end

function NovaUI:CreateWindow(options)
    local title = options.Title or "NovaUI"
    local theme = options.Theme or "FluentDark"
    CurrentTheme = Themes[theme] or Themes.FluentDark

    local ScreenGui = Create("ScreenGui", game.CoreGui, {
        Name = "NovaUI",
        ResetOnSpawn = false
    })

    local MainFrame = Create("Frame", ScreenGui, {
        Size = UDim2.new(0, 600, 0, 450),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = CurrentTheme.Background,
        BorderSizePixel = 0
    })
    Create("UICorner", MainFrame, {CornerRadius = UDim.new(0, 8)})
    AddShadow(MainFrame)

    local TitleBar = Create("Frame", MainFrame, {
        Size = UDim2.new(1, 0, 0, 35),
        BackgroundColor3 = CurrentTheme.Secondary,
        BorderSizePixel = 0
    })
    Create("UICorner", TitleBar, {CornerRadius = UDim.new(0, 8)})

    local TitleLabel = Create("TextLabel", TitleBar, {
        Size = UDim2.new(1, -60, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        Text = title,
        TextColor3 = CurrentTheme.Text,
        TextSize = 16,
        Font = Enum.Font.SourceSansBold,
        TextXAlignment = Enum.TextXAlignment.Left
    })

    local CloseButton = Create("TextButton", TitleBar, {
        Size = UDim2.new(0, 28, 0, 28),
        Position = UDim2.new(1, -20, 0.5, 0),
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        Text = "✕",
        TextColor3 = CurrentTheme.SubText,
        TextSize = 18,
        Font = Enum.Font.SourceSansBold
    })

    local MinimizeButton = Create("TextButton", TitleBar, {
        Size = UDim2.new(0, 28, 0, 28),
        Position = UDim2.new(1, -55, 0.5, 0),
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        Text = "—",
        TextColor3 = CurrentTheme.SubText,
        TextSize = 18,
        Font = Enum.Font.SourceSansBold
    })

    local TabHolder = Create("ScrollingFrame", MainFrame, {
        Size = UDim2.new(0, 160, 1, -40),
        Position = UDim2.new(0, 5, 0, 40),
        BackgroundTransparency = 1,
        ScrollBarThickness = 2,
        ScrollBarImageColor3 = CurrentTheme.Accent,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        AutomaticCanvasSize = Enum.AutomaticSize.Y
    })
    Create("UIListLayout", TabHolder, {Padding = UDim.new(0, 6)})

    local ContentHolder = Create("Frame", MainFrame, {
        Size = UDim2.new(1, -170, 1, -40),
        Position = UDim2.new(0, 170, 0, 40),
        BackgroundTransparency = 1
    })

    local WindowData = {Tabs = {}, Callbacks = {}}
    local minimized = false

    local dragging, dragInput, dragStart, startPos
    TitleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = MainFrame.Position
        end
    end)
    TitleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    CloseButton.MouseButton1Click:Connect(function()
        ScreenGui:Destroy()
    end)

    MinimizeButton.MouseButton1Click:Connect(function()
        if minimized then
            Tween(MainFrame, "Size", UDim2.new(0, 600, 0, 450), 0.3)
            ContentHolder.Visible = true
            TabHolder.Visible = true
            MinimizeButton.Text = "—"
        else
            Tween(MainFrame, "Size", UDim2.new(0, 600, 0, 35), 0.3)
            ContentHolder.Visible = false
            TabHolder.Visible = false
            MinimizeButton.Text = "□"
        end
        minimized = not minimized
    end)

    function WindowData:AddTab(options)
        local tabName = options.Name or "Tab"
        local TabButton = Create("TextButton", TabHolder, {
            Size = UDim2.new(1, -10, 0, 35),
            BackgroundColor3 = CurrentTheme.Secondary,
            Text = tabName,
            TextColor3 = CurrentTheme.SubText,
            TextSize = 14,
            Font = Enum.Font.SourceSansSemibold,
            AutoButtonColor = false
        })
        Create("UICorner", TabButton, {CornerRadius = UDim.new(0, 6)})

        local TabContent = Create("ScrollingFrame", ContentHolder, {
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            ScrollBarThickness = 2,
            ScrollBarImageColor3 = CurrentTheme.Accent,
            CanvasSize = UDim2.new(0, 0, 0, 0),
            AutomaticCanvasSize = Enum.AutomaticSize.Y,
            Visible = false
        })
        Create("UIListLayout", TabContent, {Padding = UDim.new(0, 8)})
        Create("UIPadding", TabContent, {PaddingTop = UDim.new(0, 8), PaddingLeft = UDim.new(0, 8), PaddingRight = UDim.new(0, 8)})

        local Tab = {Callbacks = {}}
        WindowData.Tabs[tabName] = {Button = TabButton, Content = TabContent}

        local function ShowTab()
            for _, t in pairs(WindowData.Tabs) do
                t.Content.Visible = false
                Tween(t.Button, "BackgroundColor3", CurrentTheme.Secondary, 0.2)
                Tween(t.Button, "TextColor3", CurrentTheme.SubText, 0.2)
            end
            TabContent.Visible = true
            Tween(TabButton, "BackgroundColor3", CurrentTheme.Accent, 0.2)
            Tween(TabButton, "TextColor3", CurrentTheme.Text, 0.2)
        end
        TabButton.MouseButton1Click:Connect(ShowTab)
        if not next(WindowData.Tabs) then ShowTab() end

        function Tab:AddSection(options)
            local sectionName = options.Name or "Section"
            local SectionFrame = Create("Frame", TabContent, {
                Size = UDim2.new(1, 0, 0, 25),
                BackgroundTransparency = 1
            })
            Create("TextLabel", SectionFrame, {
                Size = UDim2.new(1, 0, 1, 0),
                BackgroundTransparency = 1,
                Text = sectionName,
                TextColor3 = CurrentTheme.Text,
                TextSize = 16,
                Font = Enum.Font.SourceSansBold,
                TextXAlignment = Enum.TextXAlignment.Left
            })
        end

        function Tab:AddButton(options)
            local buttonText = options.Name or "Button"
            local callback = options.Callback or function() end

            local Button = Create("TextButton", TabContent, {
                Size = UDim2.new(1, 0, 0, 35),
                BackgroundColor3 = CurrentTheme.Secondary,
                Text = buttonText,
                TextColor3 = CurrentTheme.Text,
                TextSize = 14,
                Font = Enum.Font.SourceSansSemibold
            })
            Create("UICorner", Button, {CornerRadius = UDim.new(0, 6)})
            Button.MouseButton1Click:Connect(callback)
            Button.MouseEnter:Connect(function()
                Tween(Button, "BackgroundColor3", CurrentTheme.Accent, 0.2)
            end)
            Button.MouseLeave:Connect(function()
                Tween(Button, "BackgroundColor3", CurrentTheme.Secondary, 0.2)
            end)
            return Button
        end

        function Tab:AddToggle(options)
            local toggleText = options.Name or "Toggle"
            local default = options.Default or false
            local callback = options.Callback or function() end

            local ToggleFrame = Create("Frame", TabContent, {
                Size = UDim2.new(1, 0, 0, 35),
                BackgroundTransparency = 1
            })

            local Label = Create("TextLabel", ToggleFrame, {
                Size = UDim2.new(1, -40, 1, 0),
                BackgroundTransparency = 1,
                Text = toggleText,
                TextColor3 = CurrentTheme.Text,
                TextSize = 14,
                Font = Enum.Font.SourceSansSemibold,
                TextXAlignment = Enum.TextXAlignment.Left
            })

            local ToggleButton = Create("Frame", ToggleFrame, {
                Size = UDim2.new(0, 36, 0, 20),
                Position = UDim2.new(1, -5, 0.5, 0),
                AnchorPoint = Vector2.new(1, 0.5),
                BackgroundColor3 = CurrentTheme.Border
            })
            Create("UICorner", ToggleButton, {CornerRadius = UDim.new(0, 10)})

            local Indicator = Create("Frame", ToggleButton, {
                Size = UDim2.new(0, 16, 0, 16),
                Position = default and UDim2.new(1, -2, 0.5, 0) or UDim2.new(0, 2, 0.5, 0),
                AnchorPoint = Vector2.new(0.5, 0.5),
                BackgroundColor3 = default and CurrentTheme.Accent or CurrentTheme.SubText
            })
            Create("UICorner", Indicator, {CornerRadius = UDim.new(0, 8)})

            local state = default
            local function UpdateToggle()
                state = not state
                Tween(Indicator, "Position", state and UDim2.new(1, -2, 0.5, 0) or UDim2.new(0, 2, 0.5, 0), 0.2)
                Tween(Indicator, "BackgroundColor3", state and CurrentTheme.Accent or CurrentTheme.SubText, 0.2)
                callback(state)
            end

            ToggleFrame.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    UpdateToggle()
                end
            end)

            Tab.Callbacks[toggleText] = UpdateToggle
            return ToggleFrame
        end

        function Tab:AddSlider(options)
            local sliderText = options.Name or "Slider"
            local min = options.Min or 0
            local max = options.Max or 100
            local default = options.Default or min
            local callback = options.Callback or function() end

            local SliderFrame = Create("Frame", TabContent, {
                Size = UDim2.new(1, 0, 0, 50),
                BackgroundTransparency = 1
            })

            local Label = Create("TextLabel", SliderFrame, {
                Size = UDim2.new(1, 0, 0, 20),
                BackgroundTransparency = 1,
                Text = sliderText,
                TextColor3 = CurrentTheme.Text,
                TextSize = 14,
                Font = Enum.Font.SourceSansSemibold,
                TextXAlignment = Enum.TextXAlignment.Left
            })

            local SliderBar = Create("Frame", SliderFrame, {
                Size = UDim2.new(1, 0, 0, 6),
                Position = UDim2.new(0, 0, 0, 30),
                BackgroundColor3 = CurrentTheme.Border
            })
            Create("UICorner", SliderBar, {CornerRadius = UDim.new(0, 3)})

            local Fill = Create("Frame", SliderBar, {
                Size = UDim2.new(0, 0, 1, 0),
                BackgroundColor3 = CurrentTheme.Accent
            })
            Create("UICorner", Fill, {CornerRadius = UDim.new(0, 3)})

            local ValueLabel = Create("TextLabel", SliderFrame, {
                Size = UDim2.new(0, 40, 0, 20),
                Position = UDim2.new(1, -45, 0, 5),
                BackgroundTransparency = 1,
                Text = tostring(default),
                TextColor3 = CurrentTheme.SubText,
                TextSize = 12,
                Font = Enum.Font.SourceSans
            })

            local value = default
            local function UpdateSlider(input)
                local sliderSize = SliderBar.AbsoluteSize.X
                local mouseX = math.clamp(input.Position.X - SliderBar.AbsolutePosition.X, 0, sliderSize)
                local scale = mouseX / sliderSize
                value = math.floor(min + (max - min) * scale)
                Tween(Fill, "Size", UDim2.new(scale, 0, 1, 0), 0.1)
                ValueLabel.Text = tostring(value)
                callback(value)
            end

            SliderBar.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    UpdateSlider(input)
                    local connection
                    connection = UserInputService.InputChanged:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseMovement then
                            UpdateSlider(input)
                        end
                    end)
                    input.Changed:Connect(function()
                        if input.UserInputState == Enum.UserInputState.End then
                            connection:Disconnect()
                        end
                    end)
                end
            end)

            UpdateSlider({Position = Vector2.new(SliderBar.AbsolutePosition.X + ((default - min) / (max - min)) * SliderBar.AbsoluteSize.X, 0)})
            Tab.Callbacks[sliderText] = UpdateSlider
            return SliderFrame
        end

        function Tab:AddDropdown(options)
            local dropdownText = options.Name or "Dropdown"
            local items = options.Options or {"Option 1", "Option 2"}
            local default = options.Default or items[1]
            local callback = options.Callback or function() end

            local DropdownFrame = Create("Frame", TabContent, {
                Size = UDim2.new(1, 0, 0, 35),
                BackgroundTransparency = 1
            })

            local Label = Create("TextLabel", DropdownFrame, {
                Size = UDim2.new(1, -100, 1, 0),
                BackgroundTransparency = 1,
                Text = dropdownText,
                TextColor3 = CurrentTheme.Text,
                TextSize = 14,
                Font = Enum.Font.SourceSansSemibold,
                TextXAlignment = Enum.TextXAlignment.Left
            })

            local DropdownButton = Create("TextButton", DropdownFrame, {
                Size = UDim2.new(0, 100, 0, 25),
                Position = UDim2.new(1, -5, 0.5, 0),
                AnchorPoint = Vector2.new(1, 0.5),
                BackgroundColor3 = CurrentTheme.Secondary,
                Text = default,
                TextColor3 = CurrentTheme.Text,
                TextSize = 14,
                Font = Enum.Font.SourceSansSemibold
            })
            Create("UICorner", DropdownButton, {CornerRadius = UDim.new(0, 6)})

            local OptionHolder = Create("Frame", ScreenGui, {
                Size = UDim2.new(0, 100, 0, 0),
                Position = UDim2.new(0, DropdownButton.AbsolutePosition.X, 0, DropdownButton.AbsolutePosition.Y + 25),
                BackgroundColor3 = CurrentTheme.Secondary,
                Visible = false,
                ClipsDescendants = true
            })
            Create("UICorner", OptionHolder, {CornerRadius = UDim.new(0, 6)})
            Create("UIListLayout", OptionHolder, {Padding = UDim.new(0, 2)})
            AddShadow(OptionHolder)

            local function UpdateOptions()
                OptionHolder:ClearAllChildren()
                Create("UIListLayout", OptionHolder, {Padding = UDim.new(0, 2)})
                for _, option in pairs(items) do
                    local OptionButton = Create("TextButton", OptionHolder, {
                        Size = UDim2.new(1, 0, 0, 25),
                        BackgroundTransparency = 1,
                        Text = option,
                        TextColor3 = CurrentTheme.Text,
                        TextSize = 14,
                        Font = Enum.Font.SourceSansSemibold
                    })
                    OptionButton.MouseButton1Click:Connect(function()
                        DropdownButton.Text = option
                        OptionHolder.Visible = false
                        Tween(OptionHolder, "Size", UDim2.new(0, 100, 0, 0), 0.2)
                        callback(option)
                    end)
                    OptionButton.MouseEnter:Connect(function()
                        Tween(OptionButton, "BackgroundTransparency", 0.9, 0.2)
                        Tween(OptionButton, "BackgroundColor3", CurrentTheme.Accent, 0.2)
                    end)
                    OptionButton.MouseLeave:Connect(function()
                        Tween(OptionButton, "BackgroundTransparency", 1, 0.2)
                    end)
                end
                Tween(OptionHolder, "Size", UDim2.new(0, 100, 0, #items * 27), 0.2)
            end

            DropdownButton.MouseButton1Click:Connect(function()
                OptionHolder.Visible = not OptionHolder.Visible
                if OptionHolder.Visible then UpdateOptions() else Tween(OptionHolder, "Size", UDim2.new(0, 100, 0, 0), 0.2) end
            end)

            Tab.Callbacks[dropdownText] = function(value) DropdownButton.Text = value; callback(value) end
            return DropdownFrame
        end

        function Tab:AddTextbox(options)
            local textboxText = options.Name or "Textbox"
            local default = options.Default or ""
            local callback = options.Callback or function() end

            local TextboxFrame = Create("Frame", TabContent, {
                Size = UDim2.new(1, 0, 0, 35),
                BackgroundTransparency = 1
            })

            local Label = Create("TextLabel", TextboxFrame, {
                Size = UDim2.new(1, -100, 1, 0),
                BackgroundTransparency = 1,
                Text = textboxText,
                TextColor3 = CurrentTheme.Text,
                TextSize = 14,
                Font = Enum.Font.SourceSansSemibold,
                TextXAlignment = Enum.TextXAlignment.Left
            })

            local Textbox = Create("TextBox", TextboxFrame, {
                Size = UDim2.new(0, 100, 0, 25),
                Position = UDim2.new(1, -5, 0.5, 0),
                AnchorPoint = Vector2.new(1, 0.5),
                BackgroundColor3 = CurrentTheme.Secondary,
                Text = default,
                TextColor3 = CurrentTheme.Text,
                TextSize = 14,
                Font = Enum.Font.SourceSansSemibold,
                ClearTextOnFocus = false
            })
            Create("UICorner", Textbox, {CornerRadius = UDim.new(0, 6)})

            Textbox.Focused:Connect(function()
                Tween(Textbox, "BackgroundColor3", CurrentTheme.Border, 0.2)
            end)
            Textbox.FocusLost:Connect(function()
                Tween(Textbox, "BackgroundColor3", CurrentTheme.Secondary, 0.2)
                callback(Textbox.Text)
            end)

            Tab.Callbacks[textboxText] = function(value) Textbox.Text = value; callback(value) end
            return TextboxFrame
        end

        function Tab:AddKeybind(options)
            local keybindText = options.Name or "Keybind"
            local default = options.Default or Enum.KeyCode.E
            local callback = options.Callback or function() end

            local KeybindFrame = Create("Frame", TabContent, {
                Size = UDim2.new(1, 0, 0, 35),
                BackgroundTransparency = 1
            })

            local Label = Create("TextLabel", KeybindFrame, {
                Size = UDim2.new(1, -100, 1, 0),
                BackgroundTransparency = 1,
                Text = keybindText,
                TextColor3 = CurrentTheme.Text,
                TextSize = 14,
                Font = Enum.Font.SourceSansSemibold,
                TextXAlignment = Enum.TextXAlignment.Left
            })

            local KeybindButton = Create("TextButton", KeybindFrame, {
                Size = UDim2.new(0, 100, 0, 25),
                Position = UDim2.new(1, -5, 0.5, 0),
                AnchorPoint = Vector2.new(1, 0.5),
                BackgroundColor3 = CurrentTheme.Secondary,
                Text = default.Name,
                TextColor3 = CurrentTheme.Text,
                TextSize = 14,
                Font = Enum.Font.SourceSansSemibold
            })
            Create("UICorner", KeybindButton, {CornerRadius = UDim.new(0, 6)})

            local key = default
            local listening = false
            KeybindButton.MouseButton1Click:Connect(function()
                listening = true
                KeybindButton.Text = "..."
            end)

            UserInputService.InputBegan:Connect(function(input)
                if listening and input.UserInputType == Enum.UserInputType.Keyboard then
                    key = input.KeyCode
                    KeybindButton.Text = key.Name
                    listening = false
                    callback(key)
                end
            end)

            UserInputService.InputBegan:Connect(function(input)
                if not listening and input.KeyCode == key then
                    callback(key)
                end
            end)

            Tab.Callbacks[keybindText] = function(newKey) key = newKey; KeybindButton.Text = newKey.Name; callback(newKey) end
            return KeybindFrame
        end

        function Tab:AddColorPicker(options)
            local pickerText = options.Name or "Color Picker"
            local default = options.Default or Color3.fromRGB(255, 255, 255)
            local callback = options.Callback or function() end

            local ColorFrame = Create("Frame", TabContent, {
                Size = UDim2.new(1, 0, 0, 35),
                BackgroundTransparency = 1
            })

            local Label = Create("TextLabel", ColorFrame, {
                Size = UDim2.new(1, -40, 1, 0),
                BackgroundTransparency = 1,
                Text = pickerText,
                TextColor3 = CurrentTheme.Text,
                TextSize = 14,
                Font = Enum.Font.SourceSansSemibold,
                TextXAlignment = Enum.TextXAlignment.Left
            })

            local ColorButton = Create("Frame", ColorFrame, {
                Size = UDim2.new(0, 25, 0, 25),
                Position = UDim2.new(1, -5, 0.5, 0),
                AnchorPoint = Vector2.new(1, 0.5),
                BackgroundColor3 = default
            })
            Create("UICorner", ColorButton, {CornerRadius = UDim.new(0, 6)})

            local PickerFrame = Create("Frame", ScreenGui, {
                Size = UDim2.new(0, 180, 0, 180),
                Position = UDim2.new(0, ColorButton.AbsolutePosition.X - 150, 0, ColorButton.AbsolutePosition.Y + 25),
                BackgroundColor3 = CurrentTheme.Secondary,
                Visible = false,
                ClipsDescendants = true
            })
            Create("UICorner", PickerFrame, {CornerRadius = UDim.new(0, 6)})
            AddShadow(PickerFrame)

            local HueBar = Create("Frame", PickerFrame, {
                Size = UDim2.new(0, 15, 1, -10),
                Position = UDim2.new(1, -20, 0, 5),
                BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            })
            Create("UIGradient", HueBar, {
                Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
                    ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 255, 0)),
                    ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)),
                    ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)),
                    ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 0, 255)),
                    ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
                })
            })

            local SatVal = Create("Frame", PickerFrame, {
                Size = UDim2.new(0, 150, 1, -10),
                Position = UDim2.new(0, 5, 0, 5),
                BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            })
            Create("UIGradient", SatVal, {
                Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
                })
            })
            local SatValGradient2 = Create("UIGradient", SatVal, {
                Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0, 0)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0))
                }),
                Rotation = 90
            })

            local Cursor = Create("Frame", SatVal, {
                Size = UDim2.new(0, 8, 0, 8),
                AnchorPoint = Vector2.new(0.5, 0.5),
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                BorderColor3 = Color3.fromRGB(0, 0, 0)
            })
            Create("UICorner", Cursor, {CornerRadius = UDim.new(1, 0)})

            local HueCursor = Create("Frame", HueBar, {
                Size = UDim2.new(1, 4, 0, 4),
                AnchorPoint = Vector2.new(0.5, 0.5),
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                BorderColor3 = Color3.fromRGB(0, 0, 0)
            })
            Create("UICorner", HueCursor, {CornerRadius = UDim.new(1, 0)})

            local color = default
            local h, s, v = Color3.toHSV(default)
            HueCursor.Position = UDim2.new(0.5, 0, h, 0)
            Cursor.Position = UDim2.new(s, 0, 1 - v, 0)
            SatValGradient2.Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0, 0)),
                ColorSequenceKeypoint.new(1, Color3.fromHSV(h, 1, 1))
            })

            local function UpdateColorFromSatVal(input)
                local satValSize = SatVal.AbsoluteSize
                local mouseX = math.clamp(input.Position.X - SatVal.AbsolutePosition.X, 0, satValSize.X)
                local mouseY = math.clamp(input.Position.Y - SatVal.AbsolutePosition.Y, 0, satValSize.Y)
                s = mouseX / satValSize.X
                v = 1 - (mouseY / satValSize.Y)
                Cursor.Position = UDim2.new(s, 0, 1 - v, 0)
                color = Color3.fromHSV(h, s, v)
                ColorButton.BackgroundColor3 = color
                callback(color)
            end

            local function UpdateColorFromHue(input)
                local hueSize = HueBar.AbsoluteSize.Y
                local mouseY = math.clamp(input.Position.Y - HueBar.AbsolutePosition.Y, 0, hueSize)
                h = mouseY / hueSize
                HueCursor.Position = UDim2.new(0.5, 0, h, 0)
                color = Color3.fromHSV(h, s, v)
                SatValGradient2.Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0, 0)),
                    ColorSequenceKeypoint.new(1, Color3.fromHSV(h, 1, 1))
                })
                ColorButton.BackgroundColor3 = color
                callback(color)
            end

            SatVal.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    UpdateColorFromSatVal(input)
                    local connection
                    connection = UserInputService.InputChanged:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseMovement then
                            UpdateColorFromSatVal(input)
                        end
                    end)
                    input.Changed:Connect(function()
                        if input.UserInputState == Enum.UserInputState.End then
                            connection:Disconnect()
                        end
                    end)
                end
            end)

            HueBar.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    UpdateColorFromHue(input)
                    local connection
                    connection = UserInputService.InputChanged:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseMovement then
                            UpdateColorFromHue(input)
                        end
                    end)
                    input.Changed:Connect(function()
                        if input.UserInputState == Enum.UserInputState.End then
                            connection:Disconnect()
                        end
                    end)
                end
            end)

            ColorButton.MouseButton1Click:Connect(function()
                PickerFrame.Visible = not PickerFrame.Visible
            end)

            Tab.Callbacks[pickerText] = function(newColor)
                color = newColor
                ColorButton.BackgroundColor3 = newColor
                h, s, v = Color3.toHSV(newColor)
                HueCursor.Position = UDim2.new(0.5, 0, h, 0)
                Cursor.Position = UDim2.new(s, 0, 1 - v, 0)
                SatValGradient2.Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0, 0)),
                    ColorSequenceKeypoint.new(1, Color3.fromHSV(h, 1, 1))
                })
                callback(newColor)
            end
            return ColorFrame
        end

        return Tab
    end

    return WindowData
end

return NovaUI
